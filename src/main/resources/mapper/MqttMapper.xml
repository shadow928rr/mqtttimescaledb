<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guo.mqtttimescaledb.mapper.MqttMapper">

    <resultMap id="BaseResultMap" type="com.guo.mqtttimescaledb.eneity.Mqtt">
        <!--        <id property="id" column="id" jdbcType="VARCHAR"/>-->
        <result property="temperature" column="temperature" jdbcType="REAL"/>
        <result property="pointlabel" column="pointlabel" jdbcType="VARCHAR"/>
        <result property="collecttime" column="collecttime" jdbcType="VARCHAR"/>
    </resultMap>

    <!--    将表名origindata修改为measureorigindata-->
<!--    查询序列-->
    <select id="selectFlagNum" resultType="string">
        --         select nextval('mqtt4_id')
        select nextval('${sequenceName}.measureorigindata_id')
    </select>
    <select id="setFlagNum" resultType="string">
        --         SELECT setval('mqtt4_id', 1, false)
        SELECT setval('${sequenceName}.${sequenceName}4_id', 1, false)
    </select>
<!--    将表名origindata修改为measureorigindata-->
    <insert id="insertTable">
        insert into ${schemaName}.measureorigindata (temperature,pointlabel,collecttime,num)
        values
        <foreach collection="mqttList" item="item" index="index" separator=",">
            (#{item.temperature}, #{item.pointlabel}, #{item.collecttime}, #{item.num})
        </foreach>
    </insert>
    <!--    将表名origindata修改为measureorigindata-->
    <update id="createTableMeasureOriginData">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "temperature" float4,
            "pointlabel"  int8,
            "collecttime" timestamptz NOT NULL,
            "num"         int8
        );
    </update>
    <update id="createTableMeasureData">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "temperature" float4,
            "pointlabel"  int8,
            "collecttime" timestamptz NOT NULL
        );
    </update>
    <update id="createMeasureInfoTable">
        -- 在指定模式下创建配置表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "pointlabel"       int4 NOT NULL,
            "pointcode"        varchar(255),
            "pointdescription" varchar(255),
            PRIMARY KEY ("pointlabel")
        );
    </update>
    <update id="createPlotInfoTable">
        -- 在指定模式下创建保存图数据的表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "charttitle"           varchar NULL,
            "yaxismax"            float4  NULL,
            "yaxismin"            float4  NULL,
            "selectedpointstring" varchar NULL,
            "timerange"            int4    NULL,
            "id"                    serial4 NOT NULL,
            PRIMARY KEY ("id")
        );

    </update>
<!--    控制缓存表-->
    <update id="createControlCacheTable">
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "loopid" int4 NOT NULL,
            "groupname" varchar(255) COLLATE "pg_catalog"."default" NOT NULL,
            "maxcollecttime4" timestamptz,
            "swaptime4" timestamptz,
            "mincollecttime4" timestamptz,
            "maxcurrent4" float4,
            "mincurrent4" float4,
            "maxvoltage4" float4,
            "minvoltage4" float4,
            "maxpower4" float4,
            "minpower4" float4,
            "maxcalculateerror4" float4,
            "mincalculateerror4" float4,
            "maxcalculatecurrent4" float4,
            "mincalculatecurrent4" float4,
            "maxcalculatetemperature4" float4,
            "mincalculatetemperature4" float4,
            "maxintegralvalue4" float4,
            "minintegralvalue4" float4,
            "maxderivativevalue4" float4,
            "minderivativevalue4" float4,
            "maxcollecttime8" timestamptz,
            "swaptime8" timestamptz,
            "mincollecttime8" timestamptz,
            "maxcurrent8" float4,
            "mincurrent8" float4,
            "maxvoltage8" float4,
            "minvoltage8" float4,
            "maxpower8" float4,
            "minpower8" float4,
            "maxcalculateerror8" float4,
            "mincalculateerror8" float4,
            "maxcalculatecurrent8" float4,
            "mincalculatecurrent8" float4,
            "maxcalculatetemperature8" float4,
            "mincalculatetemperature8" float4,
            "maxintegralvalue8" float4,
            "minintegralvalue8" float4,
            "maxderivativevalue8" float4,
            "minderivativevalue8" float4,
            "maxcollecttime16" timestamptz,
            "swaptime16" timestamptz,
            "mincollecttime16" timestamptz,
            "maxcurrent16" float4,
            "mincurrent16" float4,
            "maxvoltage16" float4,
            "minvoltage16" float4,
            "maxpower16" float4,
            "minpower16" float4,
            "maxcalculateerror16" float4,
            "mincalculateerror16" float4,
            "maxcalculatecurrent16" float4,
            "mincalculatecurrent16" float4,
            "maxcalculatetemperature16" float4,
            "mincalculatetemperature16" float4,
            "maxintegralvalue16" float4,
            "minintegralvalue16" float4,
            "maxderivativevalue16" float4,
            "minderivativevalue16" float4,
            "maxcollecttime32" timestamptz,
            "swaptime32" timestamptz,
            "mincollecttime32" timestamptz,
            "maxcurrent32" float4,
            "mincurrent32" float4,
            "maxvoltage32" float4,
            "minvoltage32" float4,
            "maxpower32" float4,
            "minpower32" float4,
            "maxcalculateerror32" float4,
            "mincalculateerror32" float4,
            "maxcalculatecurrent32" float4,
            "mincalculatecurrent32" float4,
            "maxcalculatetemperature32" float4,
            "mincalculatetemperature32" float4,
            "maxintegralvalue32" float4,
            "minintegralvalue32" float4,
            "maxderivativevalue32" float4,
            "minderivativevalue32" float4,
            "maxcollecttime64" timestamptz,
            "swaptime64" timestamptz,
            "mincollecttime64" timestamptz,
            "maxcurrent64" float4,
            "mincurrent64" float4,
            "maxvoltage64" float4,
            "minvoltage64" float4,
            "maxpower64" float4,
            "minpower64" float4,
            "maxcalculateerror64" float4,
            "mincalculateerror64" float4,
            "maxcalculatecurrent64" float4,
            "mincalculatecurrent64" float4,
            "maxcalculatetemperature64" float4,
            "mincalculatetemperature64" float4,
            "maxintegralvalue64" float4,
            "minintegralvalue64" float4,
            "maxderivativevalue64" float4,
            "minderivativevalue64" float4,
            "maxcollecttime128" timestamptz,
            "swaptime128" timestamptz,
            "mincollecttime128" timestamptz,
            "maxcurrent128" float4,
            "mincurrent128" float4,
            "maxvoltage128" float4,
            "minvoltage128" float4,
            "maxpower128" float4,
            "minpower128" float4,
            "maxcalculateerror128" float4,
            "mincalculateerror128" float4,
            "maxcalculatecurrent128" float4,
            "mincalculatecurrent128" float4,
            "maxcalculatetemperature128" float4,
            "mincalculatetemperature128" float4,
            "maxintegralvalue128" float4,
            "minintegralvalue128" float4,
            "maxderivativevalue128" float4,
            "minderivativevalue128" float4,
            PRIMARY KEY ("loopid", "groupname")
        );
    </update>
<!--采集缓存表-->
    <update id="createMeasureCacheTable">
        -- 在指定模式下创建缓存表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "pointlabel"          int4 NOT NULL,
            "maxcalculatetime4"   timestamptz,
            "swaptime4"           timestamptz,
            "maxdata4"            float4,
            "mincalculatetime4"   timestamptz,
            "minidata4"           float4,
            "maxcalculatetime8"   timestamptz,
            "swaptime8"           timestamptz,
            "maxdata8"            float4,
            "mincalculatetime8"   timestamptz,
            "minidata8"           float4,
            "maxcalculatetime16"  timestamptz,
            "swaptime16"          timestamptz,
            "maxdata16"           float4,
            "mincalculatetime16"  timestamptz,
            "minidata16"          float4,
            "maxcalculatetime32"  timestamptz,
            "swaptime32"          timestamptz,
            "maxdata32"           float4,
            "mincalculatetime32"  timestamptz,
            "minidata32"          float4,
            "maxcalculatetime64"  timestamptz,
            "swaptime64"          timestamptz,
            "maxdata64"           float4,
            "mincalculatetime64"  timestamptz,
            "minidata64"          float4,
            "maxcalculatetime128" timestamptz,
            "swaptime128"         timestamptz,
            "maxdata128"          float4,
            "mincalculatetime128" timestamptz,
            "minidata128"         float4,
            PRIMARY KEY ("pointlabel")
        );
    </update>
    <update id="createSchema">
        -- 创建模式
        CREATE SCHEMA "${schemaName}" AUTHORIZATION "postgres";
    </update>
    <select id="updateHypertable" resultType="string">
        -- 创建超表,实则更新操作,需要提交事务后更改表为超表
        SELECT create_hypertable('${schemaName}.${tableName}', 'collecttime');
    </select>
    <update id="createSequence">
        -- 创建序列
        CREATE SEQUENCE "${schemaName}"."${sequenceName}"
            INCREMENT 1
            MINVALUE 1
            MAXVALUE 9223372036854775807
            START 1
            CACHE 1;
        SELECT setval('"${schemaName}"."${sequenceName}"', 1, false);
        ALTER SEQUENCE "${schemaName}"."${sequenceName}" OWNER TO "postgres";
    </update>
    <update id="dropSchema">
        --删除模式
        DROP SCHEMA IF EXISTS ${schemaName} CASCADE;
    </update>
    <!--    将表名origindata修改为measureorigindata-->
    <update id="createTrigger">
<!--        <![CDATA[]]>-->
        -- 创建函数
        CREATE OR REPLACE FUNCTION "${schemaName}"."insert_mqtt4"()
            RETURNS "pg_catalog"."trigger" AS $BODY$
                DECLARE
                    i                 INT;
                    j                 INT;
                    maxtemperature4   FLOAT;
                    mintemperature4   FLOAT;
                    maxtemperature8   FLOAT;
                    mintemperature8   FLOAT;
                    maxtemperature16  FLOAT;
                    mintemperature16  FLOAT;
                    maxtemperature32  FLOAT;
                    mintemperature32  FLOAT;
                    maxtemperature64  FLOAT;
                    mintemperature64  FLOAT;
                    maxtemperature128 FLOAT;
                    mintemperature128 FLOAT;
                    swaptimestamp4    timestamptz;
                    swaptimestamp8    timestamptz;
                    swaptimestamp16   timestamptz;
                    swaptimestamp32   timestamptz;
                    swaptimestamp64   timestamptz;
                    swaptimestamp128  timestamptz;
        BEGIN
            SELECT DISTINCT pointlabel INTO j FROM "${schemaName}".measureinfo ORDER BY pointlabel DESC LIMIT 1;

            select maxdata4 into maxtemperature4 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata4 into mintemperature4 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select maxdata8 into maxtemperature8 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata8 into mintemperature8 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select maxdata16 into maxtemperature16 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata16 into mintemperature16 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select maxdata32 into maxtemperature32 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata32 into mintemperature32 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select maxdata64 into maxtemperature64 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata64 into mintemperature64 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select maxdata128 into maxtemperature128 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            select minidata128 into mintemperature128 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
            -- 更新最大值，最小值4
        <![CDATA[
            IF maxtemperature4<=NEW.temperature OR maxtemperature4 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata4=NEW.temperature,maxcalculatetime4=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature4>=NEW.temperature OR mintemperature4 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata4=NEW.temperature,mincalculatetime4=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;
        ]]>

        -- 更新最大值，最小值8
        <![CDATA[
            IF maxtemperature8<=NEW.temperature OR maxtemperature8 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata8=NEW.temperature,maxcalculatetime8=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature8>=NEW.temperature OR mintemperature8 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata8=NEW.temperature,mincalculatetime8=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;
        ]]>

        -- 更新最大值，最小值16
        <![CDATA[
            IF maxtemperature16<=NEW.temperature OR maxtemperature16 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata16=NEW.temperature,maxcalculatetime16=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature16>=NEW.temperature OR mintemperature16 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata16=NEW.temperature,mincalculatetime16=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;
            ]]>

        -- 更新最大值，最小值32
        <![CDATA[
            IF maxtemperature32<=NEW.temperature OR maxtemperature32 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata32=NEW.temperature,maxcalculatetime32=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature32>=NEW.temperature OR mintemperature32 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata32=NEW.temperature,mincalculatetime32=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;
            ]]>

        -- 更新最大值，最小值64
        <![CDATA[
            IF maxtemperature64<=NEW.temperature OR maxtemperature64 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata64=NEW.temperature,maxcalculatetime64=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature64>=NEW.temperature OR mintemperature64 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata64=NEW.temperature,mincalculatetime64=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;
            ]]>

        -- 更新最大值，最小值128
        <![CDATA[
            IF maxtemperature128<=NEW.temperature OR maxtemperature128 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET maxdata128=NEW.temperature,maxcalculatetime128=NEW.collecttime where pointlabel=NEW.pointlabel;
            END IF;

            IF mintemperature128>=NEW.temperature OR mintemperature128 IS NULL THEN
                UPDATE "${schemaName}".measurecache SET minidata128=NEW.temperature,mincalculatetime128=NEW.collecttime  where pointlabel=NEW.pointlabel;
            END IF;
            ]]>

        --更新时间，及对表4插入
            IF NEW.num%4 = 0 AND NEW.pointlabel=j THEN
                select swaptime4 into swaptimestamp4 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime4 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime4 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime4=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime4=swaptimestamp4 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime4=swaptimestamp4 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime4=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata4 (pointlabel,temperature,collecttime) select pointlabel,minidata4,mincalculatetime4 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata4 (pointlabel,temperature,collecttime) select pointlabel,maxdata4,maxcalculatetime4 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata4 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata4 = NULL;
            ELSE
                IF NEW.num%2 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime4=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;

            --更新时间，及对表8插入
            IF NEW.num%8 = 0 AND NEW.pointlabel=j THEN
                select swaptime8 into swaptimestamp8 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime8 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime8 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime8=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime8=swaptimestamp8 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime8=swaptimestamp8 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime8=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata8 (pointlabel,temperature,collecttime) select pointlabel,minidata8,maxcalculatetime8 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata8 (pointlabel,temperature,collecttime) select pointlabel,maxdata8,mincalculatetime8 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata8 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata8 = NULL;
            ELSE
                IF NEW.num%4 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime8=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;

            --更新时间，及对表16插入
            IF NEW.num%16 = 0 AND NEW.pointlabel=j THEN
                select swaptime16 into swaptimestamp16 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime16 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime16 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime16=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime16=swaptimestamp16 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime16=swaptimestamp16 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime16=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata16 (pointlabel,temperature,collecttime) select pointlabel,minidata16,mincalculatetime16 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata16 (pointlabel,temperature,collecttime) select pointlabel,maxdata16,maxcalculatetime16 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata16 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata16 = NULL;
            ELSE
                IF NEW.num%8 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime16=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;

            --更新时间，及对表32插入
            IF NEW.num%32 = 0 AND NEW.pointlabel=j THEN
                select swaptime32 into swaptimestamp32 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime32 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime32 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime32=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime32=swaptimestamp32 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime32=swaptimestamp32 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime32=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata32 (pointlabel,temperature,collecttime) select pointlabel,minidata32,mincalculatetime32 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata32 (pointlabel,temperature,collecttime) select pointlabel,maxdata32,maxcalculatetime32 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata32 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata32 = NULL;
            ELSE
                IF NEW.num%16 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime32=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;

            --更新时间，及对表64插入
            IF NEW.num%64 = 0 AND NEW.pointlabel=j THEN
                select swaptime64 into swaptimestamp64 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime64 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime64 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime64=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime64=swaptimestamp64 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime64=swaptimestamp64 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime64=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata64 (pointlabel,temperature,collecttime) select pointlabel,minidata64,mincalculatetime64 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata64 (pointlabel,temperature,collecttime) select pointlabel,maxdata64,maxcalculatetime64 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata64 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata64 = NULL;
            ELSE
                IF NEW.num%32 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime64=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;

            --更新时间，及对表128插入
            IF NEW.num%128 = 0 AND NEW.pointlabel=j THEN
                select swaptime128 into swaptimestamp128 from "${schemaName}".measurecache where pointlabel = NEW.pointlabel;
                FOR i IN 1..j LOOP
                        if (select maxcalculatetime128 from "${schemaName}".measurecache where pointlabel = i)>(select mincalculatetime128 from "${schemaName}".measurecache where pointlabel = i) THEN
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime128=NEW.collecttime where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime128=swaptimestamp128 where pointlabel=i;
                        ELSE
                            UPDATE "${schemaName}".measurecache SET maxcalculatetime128=swaptimestamp128 where pointlabel=i;
                            UPDATE "${schemaName}".measurecache SET mincalculatetime128=NEW.collecttime where pointlabel=i;
                        END if;
                    END LOOP;
                INSERT INTO "${schemaName}".measuredata128 (pointlabel,temperature,collecttime) select pointlabel,minidata128,mincalculatetime128 from "${schemaName}".measurecache;
                INSERT INTO "${schemaName}".measuredata128 (pointlabel,temperature,collecttime) select pointlabel,maxdata128,maxcalculatetime128 from "${schemaName}".measurecache;
                UPDATE "${schemaName}".measurecache set minidata128 = NULL;
                UPDATE "${schemaName}".measurecache set maxdata128 = NULL;
            ELSE
                IF NEW.num%64 = 0 AND NEW.pointlabel=j THEN
                    FOR i IN 1..j LOOP
                            UPDATE "${schemaName}".measurecache SET swaptime128=NEW.collecttime where pointlabel=i;
                        END LOOP;
                END IF;
            END IF;
            RETURN NULL;
        END;
        $BODY$
        LANGUAGE plpgsql VOLATILE;

        CREATE TRIGGER "insert_mqtt4_trigger"
            AFTER INSERT
            ON "${schemaName}"."measureorigindata"
            FOR EACH ROW
        EXECUTE PROCEDURE "${schemaName}"."insert_mqtt4"();
    </update>
<!--    新增加监视表-->
    <update id="createTableAlarmSolution">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "id"            serial4 NOT NULL,
            "name"          varchar(255),
            "createtime"    timestamptz,
            "alarmcontent"  json,
            PRIMARY KEY ("id")
        );
    </update>
<!--    新增加控制表-->
    <update id="createTableControlInfo">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "id"            serial4 NOT NULL,
            "createtime"    timestamptz,
            "content"       varchar(3000),
            "name"          varchar(255),
            "testname"      varchar(255),
            PRIMARY KEY ("id")
        );
    </update>
<!--    控制总表-->
    <update id="createTableControlOriginData">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "current"               float4,
            "voltage"               int4,
            "loopid"                int4,
            "collecttime"           timestamptz NOT NULL,
            "num"                   int4,
            "power"                 float4,
            "groupname"             varchar(255),
            "calculateerror"        float4,
            "calculatecurrent"      float4,
            "calculatetemperature"  float4,
            "integralvalue"         float4,
            "derivativevalue"       float4
        );
    </update>
    <update id="createTableControlData">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "current"               float4,
            "voltage"               int4,
            "loopid"                int4,
            "collecttime"           timestamptz NOT NULL,
            "power"                 float4,
            "groupname"             varchar(255),
            "calculateerror"        float4,
            "calculatecurrent"      float4,
            "calculatetemperature"  float4,
            "integralvalue"         float4,
            "derivativevalue"       float4
        );
    </update>
<!--    工况表-->
    <update id="createTableWorkForm">
        -- 在指定模式下创建表
        CREATE TABLE IF NOT EXISTS "${schemaName}"."${tableName}"
        (
            "id"                    serial4 NOT NULL,
            "createtime"            timestamptz NOT NULL,
            "formcontent"           json,
            "phasename"             varchar(255),
            "formtype"              int8,
            "groupname"             varchar(255)
        );
    </update>
</mapper>
